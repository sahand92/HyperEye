%Network
inputTileSize=[160,160,3];
encoderDepth=2;
numclasses=4;
[lgraph, outputSize] = unetLayers(inputTileSize,numclasses,...
    'EncoderDepth',encoderDepth);%,...
  % 'ConvolutionPadding','valid');
%outputLayer = pixelClassificationLayer('Name','Output');
outputLayer = model.customPixelClassificationLayer('Name','customOutput');

lgraph = replaceLayer(lgraph,'Segmentation-Layer',outputLayer);

% ImageInput = imageInputLayer(inputTileSize,'normalization','none',...
%     'Name','input');
% lgraph = replaceLayer(lgraph,'ImageInputLayer',ImageInput);

%Training Data
imds=imageDatastore(imageDir);

%classNames=["bad","good"];
%labelID=[1 2];

 classNames=["sound","bad","split","foreign"];
 labelID=[1 2 3 5];

%  classNames=["BG","K_sound","K_bad","KD_split","D_sound","D_bad"];
%  labelID=[0 1 2 3 4 5];

% classNames=["BG","K_sound","K_bad","KD_split","D_sound","D_bad","L_sound","L_bad","L_split"];
% labelID=[0 1 2 3 4 5 7 8 9];

pxds = pixelLabelDatastore(labelDir,classNames,labelID);
%pxds = pixelLabelDatastore(utils.natsortfiles(pxds.Files),classNames,labelID);

%  dsTrain = randomPatchExtractionDatastore(imds,pxds,...
%      [inputTileSize(1),inputTileSize(2)],'PatchesPerImage',1);

augmenter = imageDataAugmenter('RandRotation',[-90 90],...
    'RandXReflection',true,...
    'RandYReflection',true);
dsTrain = pixelLabelImageDatastore(imds,pxds,'DataAugmentation',augmenter);
dsTrain=shuffle(dsTrain);

imds_val = imageDatastore(validationDir);
pxds_val = pixelLabelDatastore(validationlabelDir,classNames,labelID);

dsVal = pixelLabelImageDatastore(imds_val,pxds_val);


% dsTrain = pixelLabelImageDatastore(imds,pxds);
% dsTrain=shuffle(dsTrain);
% dataSource = 'Training';
% dsTrain_new = transform(dsTrain,@(patchIn)model.augmentmat(patchIn,dataSource));


%Training options
l2reg = 0.0001;
maxEpochs = 200;
% options = trainingOptions('sgdm',...
%     'ExecutionEnvironment','gpu',...
%     'InitialLearnRate',0.0001, ...
%     'Momentum',0.9,...
%     'L2Regularization',l2reg,...
%     'MaxEpochs',maxEpochs,...
%     'MiniBatchSize',32,...
%     'LearnRateSchedule','none',...    
%     'Shuffle','every-epoch',...
%     'GradientThresholdMethod','l2norm',...
%     'GradientThreshold',0.05, ...
%     'Plots','training-progress', ...
%     'VerboseFrequency',20);
%validationFrequency = 50;
validationFrequency = 100;
options = trainingOptions('adam', ... %'sgdm'
    'MiniBatchSize',32, ...
    'ExecutionEnvironment','gpu',...
    'MaxEpochs',250, ...
    'InitialLearnRate',1e-3, ...
    'LearnRateSchedule','none', ...
    'LearnRateDropFactor',0.2, ...
    'LearnRateDropPeriod',100, ...
    'ValidationData',dsVal, ...
    'ValidationFrequency',validationFrequency, ...
    'Shuffle','every-epoch', ...
    'Plots','training-progress', ...
    'CheckpointPath','C:\Tagarno\all grains\checkpoints',...
    'Verbose',true);
