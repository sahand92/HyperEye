%Network
inputTileSize=[200,200,3];
encoderDepth=3;
numclasses=2;
[lgraph, outputSize] = unetLayers(inputTileSize,numclasses,...
    'EncoderDepth',encoderDepth);%,...
   %'ConvolutionPadding','valid');
outputLayer = pixelClassificationLayer('Name','Output');
lgraph = replaceLayer(lgraph,'Segmentation-Layer',outputLayer);

%Training Data
imds=imageDatastore(imageDir); 
classNames=["bad","good"];
labelID=[1 2];
pxds = pixelLabelDatastore(labelDir,classNames,labelID);

dsTrain = randomPatchExtractionDatastore(imds,pxds,[200,200],'PatchesPerImage',10);
dataSource = 'Training';
dsTrain_new = transform(dsTrain,@(patchIn)augmentAndCrop3dPatch(patchIn,dataSource));

%Training options
l2reg = 0.0001;
maxEpochs = 200;
options = trainingOptions('sgdm',...
    'ExecutionEnvironment','gpu',...
    'InitialLearnRate',0.001, ...
    'Momentum',0.9,...
    'L2Regularization',l2reg,...
    'MaxEpochs',maxEpochs,...
    'MiniBatchSize',32,...
    'LearnRateSchedule','none',...    
    'Shuffle','every-epoch',...
    'GradientThresholdMethod','l2norm',...
    'GradientThreshold',0.05, ...
    'Plots','training-progress', ...
    'VerboseFrequency',20);

options = trainingOptions('adam', ... %'sgdm'
    'MiniBatchSize',16, ...
    'ExecutionEnvironment','gpu',...
    'MaxEpochs',2000, ...
    'InitialLearnRate',1e-3, ...
    'LearnRateSchedule','none', ...
    'LearnRateDropFactor',0.1, ...
    'LearnRateDropPeriod',100, ...
    'Shuffle','every-epoch', ...
    'Plots','training-progress', ...
    'Verbose',true);
